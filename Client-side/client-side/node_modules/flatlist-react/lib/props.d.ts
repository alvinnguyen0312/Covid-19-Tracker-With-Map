import { Ref } from 'react';
import { DisplayHandlerProps, DisplayInterface } from './___subComponents/DisplayHandler';
import { InfiniteLoaderProps } from './___subComponents/InfiniteLoader';
import { renderFunc } from './___subComponents/uiFunctions';
import { GroupOptionsInterface } from './___utils/groupList';
import { SearchOptionsInterface } from './___utils/searchList';
import { SortOptionsInterface } from './___utils/sortList';
export interface GroupInterface extends GroupOptionsInterface {
    of: number;
    separator: JSX.Element | ((g: any, idx: number, label: string) => JSX.Element | null) | null;
    separatorAtTheBottom: boolean;
    sortBy: SortOptionsInterface['by'];
    sortDescending: boolean;
    sortCaseInsensitive: boolean;
}
export interface ScrollToTopInterface {
    button: JSX.Element | (() => JSX.Element);
    offset: number;
    padding: number;
    position: string;
}
export interface SortInterface extends SortOptionsInterface {
    groupBy: GroupInterface['sortBy'];
    groupDescending: GroupInterface['sortDescending'];
    groupCaseInsensitive: GroupInterface['sortCaseInsensitive'];
}
export interface Props<T> {
    __forwarededRef: Ref<HTMLElement>;
    list: T[];
    renderItem: JSX.Element | renderFunc;
    renderWhenEmpty: null | (() => JSX.Element);
    renderOnScroll: boolean;
    limit: number | string;
    reversed: boolean;
    wrapperHtmlTag: string;
    sort: boolean | SortInterface;
    sortBy: SortInterface['by'];
    sortCaseInsensitive: SortInterface['caseInsensitive'];
    sortDesc: SortInterface['descending'];
    sortDescending: SortInterface['descending'];
    sortGroupBy: GroupInterface['sortBy'];
    sortGroupDesc: GroupInterface['sortDescending'];
    sortGroupDescending: GroupInterface['sortDescending'];
    sortGroupCaseInsensitive: GroupInterface['sortCaseInsensitive'];
    group: GroupInterface;
    showGroupSeparatorAtTheBottom: GroupInterface['separatorAtTheBottom'];
    groupSeparatorAtTheBottom: GroupInterface['separatorAtTheBottom'];
    groupReversed: GroupInterface['reversed'];
    groupSeparator: GroupInterface['separator'];
    groupBy: GroupInterface['by'];
    groupOf: GroupInterface['limit'];
    groupSorted: boolean;
    groupSortedDescending: GroupInterface['sortDescending'];
    groupSortedCaseInsensitive: GroupInterface['sortCaseInsensitive'];
    display: DisplayInterface;
    displayRow: DisplayHandlerProps['displayRow'];
    rowGap: DisplayHandlerProps['rowGap'];
    displayGrid: DisplayHandlerProps['displayGrid'];
    gridGap: DisplayHandlerProps['gridGap'];
    minColumnWidth: DisplayHandlerProps['minColumnWidth'];
    filterBy: string | ((item: T, idx: number) => boolean);
    search: SearchOptionsInterface<T>;
    searchTerm: SearchOptionsInterface<T>['term'];
    searchBy: SearchOptionsInterface<T>['by'];
    searchOnEveryWord: SearchOptionsInterface<T>['everyWord'];
    searchCaseInsensitive: SearchOptionsInterface<T>['caseInsensitive'];
    searchableMinCharactersCount: SearchOptionsInterface<T>['minCharactersCount'];
    pagination: InfiniteLoaderProps;
    hasMoreItems: InfiniteLoaderProps['hasMore'];
    loadMoreItems: null | InfiniteLoaderProps['loadMore'];
    paginationLoadingIndicator: InfiniteLoaderProps['loadingIndicator'];
    paginationLoadingIndicatorPosition: InfiniteLoaderProps['loadingIndicatorPosition'];
    scrollToTop: boolean | ScrollToTopInterface;
    scrollToTopButton: JSX.Element | (() => JSX.Element);
    scrollToTopOffset: number;
    scrollToTopPadding: number;
    scrollToTopPosition: string;
    [key: string]: any;
}
export declare const defaultProps: {
    __forwarededRef: {
        current: null;
    };
    limit: number;
    renderWhenEmpty: null;
    reversed: boolean;
    renderOnScroll: boolean;
    wrapperHtmlTag: string;
    display: {
        grid: boolean;
        gridGap: string;
        gridMinColumnWidth: string;
        row: boolean;
        rowGap: string;
    };
    displayGrid: boolean;
    displayRow: boolean;
    gridGap: string;
    rowGap: string;
    minColumnWidth: string;
    filterBy: string;
    group: {
        by: string;
        limit: number;
        of: number;
        reversed: boolean;
        separator: null;
        separatorAtTheBottom: boolean;
        sortedBy: string;
        sortBy: string;
        sorted: boolean;
        sortedCaseInsensitive: boolean;
        sortCaseInsensitive: boolean;
        sortedDescending: boolean;
        sortDescending: boolean;
    };
    groupBy: string;
    groupOf: number;
    groupReversed: boolean;
    groupSeparator: null;
    groupSeparatorAtTheBottom: boolean;
    groupSorted: boolean;
    groupSortedBy: string;
    groupSortedDescending: boolean;
    groupSortedCaseInsensitive: boolean;
    showGroupSeparatorAtTheBottom: boolean;
    pagination: {
        hasMore: boolean;
        loadMore: null;
        loadingIndicator: null;
        loadingIndicatorPosition: string;
    };
    hasMoreItems: boolean;
    loadMoreItems: null;
    paginationLoadingIndicator: null;
    paginationLoadingIndicatorPosition: string;
    scrollToTop: {
        button: null;
        offset: number;
        padding: number;
        position: string;
    };
    scrollToTopButton: null;
    scrollToTopOffset: number;
    scrollToTopPadding: number;
    scrollToTopPosition: string;
    search: {
        by: string;
        caseInsensitive: boolean;
        everyWord: boolean;
        onEveryWord: boolean;
        minCharactersCount: number;
        term: string;
    };
    searchBy: string;
    searchCaseInsensitive: boolean;
    searchOnEveryWord: boolean;
    searchTerm: string;
    searchMinCharactersCount: number;
    searchableMinCharactersCount: number;
    sort: {
        by: string;
        caseInsensitive: boolean;
        descending: boolean;
        groupBy: string;
        groupCaseInsensitive: boolean;
        groupDescending: boolean;
    };
    sortBy: string;
    sortCaseInsensitive: boolean;
    sortDesc: boolean;
    sortDescending: boolean;
    sortGroupBy: string;
    sortGroupDesc: boolean;
    sortGroupCaseInsensitive: boolean;
};
export declare const propTypes: {
    __forwarededRef: import("prop-types").Requireable<object>;
    list: import("prop-types").Validator<object>;
    renderItem: import("prop-types").Validator<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
    limit: import("prop-types").Requireable<string | number>;
    renderWhenEmpty: import("prop-types").Requireable<(...args: any[]) => any>;
    reversed: import("prop-types").Requireable<boolean>;
    renderOnScroll: import("prop-types").Requireable<boolean>;
    wrapperHtmlTag: import("prop-types").Requireable<string>;
    display: import("prop-types").Requireable<import("prop-types").InferProps<{
        grid: import("prop-types").Requireable<boolean>;
        gridColumnWidth: import("prop-types").Requireable<string>;
        gridGap: import("prop-types").Requireable<string>;
        row: import("prop-types").Requireable<boolean>;
        rowGap: import("prop-types").Requireable<string>;
    }>>;
    displayGrid: import("prop-types").Requireable<boolean>;
    displayRow: import("prop-types").Requireable<boolean>;
    gridGap: import("prop-types").Requireable<string>;
    rowGap: import("prop-types").Requireable<string>;
    minColumnWidth: import("prop-types").Requireable<string>;
    filterBy: import("prop-types").Requireable<string | ((...args: any[]) => any)>;
    group: import("prop-types").Requireable<import("prop-types").InferProps<{
        by: import("prop-types").Requireable<string | ((...args: any[]) => any)>;
        limit: (props: any, propName: string, componentName: string, ...rest: any) => any;
        of: import("prop-types").Requireable<number>;
        reversed: import("prop-types").Requireable<boolean>;
        separator: import("prop-types").Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
        separatorAtTheBottom: import("prop-types").Requireable<boolean>;
        sortedBy: import("prop-types").Requireable<string | (string | import("prop-types").InferProps<{
            by: import("prop-types").Requireable<string>;
            caseInsensitive: import("prop-types").Requireable<boolean>;
            descending: import("prop-types").Requireable<boolean>;
        }> | null | undefined)[]>;
        sortBy: (props: any, propName: string, componentName: string, ...rest: any) => any;
        sortedCaseInsensitive: import("prop-types").Requireable<boolean>;
        sortCaseInsensitive: (props: any, propName: string, componentName: string, ...rest: any) => any;
        sortedDescending: import("prop-types").Requireable<boolean>;
        sortDescending: (props: any, propName: string, componentName: string, ...rest: any) => any;
    }>>;
    groupBy: import("prop-types").Requireable<string | ((...args: any[]) => any)>;
    groupOf: import("prop-types").Requireable<number>;
    groupReversed: import("prop-types").Requireable<boolean>;
    groupSeparator: import("prop-types").Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
    groupSeparatorAtTheBottom: import("prop-types").Requireable<boolean>;
    showGroupSeparatorAtTheBottom: (props: any, propName: string, componentName: string, ...rest: any) => any;
    groupSorted: import("prop-types").Requireable<boolean>;
    groupSortedBy: import("prop-types").Requireable<string | (string | import("prop-types").InferProps<{
        by: import("prop-types").Requireable<string>;
        caseInsensitive: import("prop-types").Requireable<boolean>;
        descending: import("prop-types").Requireable<boolean>;
    }> | null | undefined)[]>;
    groupSortedDescending: import("prop-types").Requireable<boolean>;
    groupSortedCaseInsensitive: import("prop-types").Requireable<boolean>;
    pagination: import("prop-types").Requireable<import("prop-types").InferProps<{
        hasMore: import("prop-types").Requireable<boolean>;
        loadMore: import("prop-types").Requireable<(...args: any[]) => any>;
        loadingIndicator: import("prop-types").Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
        loadingIndicatorPosition: import("prop-types").Requireable<string>;
    }>>;
    hasMoreItems: import("prop-types").Requireable<boolean>;
    loadMoreItems: import("prop-types").Requireable<(...args: any[]) => any>;
    paginationLoadingIndicator: import("prop-types").Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
    paginationLoadingIndicatorPosition: import("prop-types").Requireable<string>;
    scrollToTop: import("prop-types").Requireable<boolean | import("prop-types").InferProps<{
        button: import("prop-types").Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
        offset: import("prop-types").Requireable<number>;
        padding: import("prop-types").Requireable<number>;
        position: import("prop-types").Requireable<string>;
    }>>;
    scrollToTopButton: import("prop-types").Requireable<string | number | boolean | {} | import("prop-types").ReactElementLike | import("prop-types").ReactNodeArray>;
    scrollToTopOffset: import("prop-types").Requireable<number>;
    scrollToTopPadding: import("prop-types").Requireable<number>;
    scrollToTopPosition: import("prop-types").Requireable<string>;
    search: import("prop-types").Requireable<import("prop-types").InferProps<{
        by: import("prop-types").Requireable<string | ((...args: any[]) => any) | (string | import("prop-types").InferProps<{
            by: import("prop-types").Requireable<string>;
            caseInsensitive: import("prop-types").Requireable<boolean>;
        }> | null | undefined)[]>;
        caseInsensitive: import("prop-types").Requireable<boolean>;
        everyWord: (props: any, propName: string, componentName: string, ...rest: any) => any;
        onEveryWord: import("prop-types").Requireable<boolean>;
        minCharactersCount: import("prop-types").Requireable<number>;
        term: import("prop-types").Requireable<string>;
    }>>;
    searchBy: import("prop-types").Requireable<string | ((...args: any[]) => any) | (string | import("prop-types").InferProps<{
        by: import("prop-types").Requireable<string>;
        caseInsensitive: import("prop-types").Requireable<boolean>;
    }> | null | undefined)[]>;
    searchCaseInsensitive: import("prop-types").Requireable<boolean>;
    searchOnEveryWord: import("prop-types").Requireable<boolean>;
    searchableMinCharactersCount: (props: any, propName: string, componentName: string, ...rest: any) => any;
    searchMinCharactersCount: import("prop-types").Requireable<number>;
    searchTerm: import("prop-types").Requireable<string>;
    sort: import("prop-types").Requireable<boolean | import("prop-types").InferProps<{
        by: import("prop-types").Requireable<string | (string | import("prop-types").InferProps<{
            by: import("prop-types").Requireable<string>;
            caseInsensitive: import("prop-types").Requireable<boolean>;
            descending: import("prop-types").Requireable<boolean>;
        }> | null | undefined)[]>;
        caseInsensitive: import("prop-types").Requireable<boolean>;
        descending: import("prop-types").Requireable<boolean>;
        groupBy: import("prop-types").Requireable<string>;
        groupCaseInsensitive: import("prop-types").Requireable<boolean>;
        groupDescending: import("prop-types").Requireable<boolean>;
    }>>;
    sortBy: import("prop-types").Requireable<string | (string | import("prop-types").InferProps<{
        by: import("prop-types").Requireable<string>;
        caseInsensitive: import("prop-types").Requireable<boolean>;
        descending: import("prop-types").Requireable<boolean>;
    }> | null | undefined)[]>;
    sortCaseInsensitive: import("prop-types").Requireable<boolean>;
    sortDesc: import("prop-types").Requireable<boolean>;
    sortDescending: import("prop-types").Requireable<boolean>;
    sortGroupBy: (props: any, propName: string, componentName: string, ...rest: any) => any;
    sortGroupDesc: (props: any, propName: string, componentName: string, ...rest: any) => any;
    sortGroupCaseInsensitive: (props: any, propName: string, componentName: string, ...rest: any) => any;
};
//# sourceMappingURL=props.d.ts.map