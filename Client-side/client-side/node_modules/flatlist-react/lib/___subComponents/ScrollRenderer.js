"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var prop_types_1 = require("prop-types");
var react_1 = __importStar(require("react"));
var convertListToArray_1 = __importDefault(require("../___utils/convertListToArray"));
var uiFunctions_1 = require("./uiFunctions");
var ScrollRenderer = function (props) {
    var list = props.list, renderItem = props.renderItem, groupSeparator = props.groupSeparator;
    var _a = react_1.useState({ renderList: [], index: 0, prevScrollPosition: 0 }), render = _a[0], setRender = _a[1];
    var _b = react_1.useState(false), mounted = _b[0], setMounted = _b[1];
    var dataList = convertListToArray_1.default(list);
    var containerRef = react_1.createRef();
    var adding = false;
    var renderThisItem = uiFunctions_1.handleRenderItem(renderItem, uiFunctions_1.handleRenderGroupSeparator(groupSeparator));
    var addItem = function (container, prevScrollPosition) {
        if (prevScrollPosition === void 0) { prevScrollPosition = render.prevScrollPosition; }
        if (!adding && render.index < dataList.length) {
            adding = true;
            // @ts-ignore
            var count = getComputedStyle(container).display === 'grid' ? 10 : 5;
            setRender({
                prevScrollPosition: prevScrollPosition,
                renderList: __spreadArrays(render.renderList, dataList.slice(render.index, render.index + count)),
                index: render.index + count
            });
        }
    };
    var onScroll = function (span) { return function () {
        var startingPoint = span.parentNode.offsetTop + span.parentNode.offsetHeight;
        var anchorPos = span.offsetTop - span.parentNode.scrollTop;
        if (anchorPos <= (startingPoint + (span.parentNode.offsetHeight * 2))) {
            requestAnimationFrame(function () { return addItem(span.parentNode, span.parentNode.scrollTop); });
        }
    }; };
    react_1.useEffect(function () {
        if (mounted) { // reset list on list change
            setRender({
                renderList: [],
                index: 0,
                prevScrollPosition: 0
            });
        }
    }, [list]);
    react_1.useEffect(function () {
        setMounted(true);
        return function () {
            if (containerRef.current) {
                containerRef.current.parentNode.removeEventListener('scroll', onScroll, true);
            }
        };
    }, []);
    react_1.useLayoutEffect(function () {
        var span = containerRef.current;
        var container = null;
        var handleScroll = onScroll(span);
        if (span) {
            container = span.parentNode;
            // populate double the container height of items
            if (render.index === 0 || container.scrollHeight <= (container.offsetHeight * 2)) {
                requestAnimationFrame(function () { return addItem(container); });
            }
            if (render.index > 0 && dataList.length === render.renderList.length) {
                container.removeEventListener('scroll', handleScroll, true);
            }
            else {
                container.addEventListener('scroll', handleScroll, true);
            }
            adding = false;
        }
        return function () {
            if (span) {
                container.removeEventListener('scroll', handleScroll, true);
            }
        };
    }, [render.index]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        render.renderList.map(renderThisItem),
        react_1.default.createElement("span", { ref: containerRef, style: { visibility: 'hidden', height: 1 }, className: "___scroll-renderer-anchor" })));
};
ScrollRenderer.propTypes = {
    list: prop_types_1.arrayOf(prop_types_1.any).isRequired,
    renderItem: prop_types_1.func.isRequired,
    groupSeparator: prop_types_1.oneOfType([prop_types_1.node, prop_types_1.func, prop_types_1.element])
};
ScrollRenderer.defaultProps = {
    groupSeparator: null
};
exports.default = ScrollRenderer;
//# sourceMappingURL=ScrollRenderer.js.map